# Default values for domain-monitor
replicaCount: 2

image:
  repository: domain-monitor
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  sidecar.istio.io/inject: "true"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 9394
  targetPort: 9394

ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: domain-monitor.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: domain-monitor-tls
      hosts:
        - domain-monitor.example.com

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - domain-monitor
        topologyKey: kubernetes.io/hostname

# Environment variables
env:
  RUBY_ENV: production
  PORT: "9394"

# ConfigMap for application configuration
config:
  enabled: true
  data:
    config.yml: |
      ---
      server:
        port: 9394
        host: 0.0.0.0
      monitoring:
        interval: 300
        timeout: 30
      prometheus:
        enabled: true
        port: 9394
        path: /metrics

# Secret for sensitive data
secrets:
  enabled: true
  data: {}
    # Add your secret data here
    # api_key: ""
    # database_url: ""

# Health check configuration
healthcheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: 9394
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /ready
      port: 9394
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Istio configuration
istio:
  enabled: true
  virtualService:
    enabled: true
    hosts:
      - domain-monitor.example.com
    gateways:
      - domain-monitor-gateway
    http:
      - match:
        - uri:
            prefix: /
        route:
        - destination:
            host: domain-monitor
            port:
              number: 9394
  destinationRule:
    enabled: true
    trafficPolicy:
      loadBalancer:
        simple: LEAST_CONN
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 50
          maxRequestsPerConnection: 10
      circuitBreaker:
        consecutiveGatewayErrors: 3
        consecutive5xxErrors: 3
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
  gateway:
    enabled: true
    selector:
      istio: ingressgateway
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - domain-monitor.example.com
        tls:
          httpsRedirect: true
      - port:
          number: 443
          name: https
          protocol: HTTPS
        tls:
          mode: SIMPLE
          credentialName: domain-monitor-tls
        hosts:
          - domain-monitor.example.com

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels:
    app: domain-monitor
  endpoints:
    - port: http
      path: /metrics
      interval: 30s

# PodDisruptionBudget
podDisruptionBudget:
  enabled: true
  minAvailable: 1